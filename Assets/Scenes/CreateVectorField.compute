#pragma kernel Clear
#pragma kernel CreateVectorField

struct ForceFieldData
{
    float3 Center;
    float StartRange;
    float EndRange;
    float3 Direction;
    float3x3 Strength;
    float GravityFocus;
    float Speed;
    float Attraction;
    float2 RotationRandomness;
};

StructuredBuffer<ForceFieldData> Data;
RWTexture3D<float3> Destination;

float3 Center;
float3 Size;

float3 mod2D289( float3 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }

float2 mod2D289( float2 x ) { return x - floor( x * ( 1.0 / 289.0 ) ) * 289.0; }

float3 permute( float3 x ) { return mod2D289( ( ( x * 34.0 ) + 1.0 ) * x ); }

float snoise( float2 v )
{
    const float4 C = float4( 0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439 );
    float2 i = floor( v + dot( v, C.yy ) );
    float2 x0 = v - i + dot( i, C.xx );
    float2 i1;
    i1 = ( x0.x > x0.y ) ? float2( 1.0, 0.0 ) : float2( 0.0, 1.0 );
    float4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod2D289( i );
    float3 p = permute( permute( i.y + float3( 0.0, i1.y, 1.0 ) ) + i.x + float3( 0.0, i1.x, 1.0 ) );
    float3 m = max( 0.5 - float3( dot( x0, x0 ), dot( x12.xy, x12.xy ), dot( x12.zw, x12.zw ) ), 0.0 );
    m = m * m;
    m = m * m;
    float3 x = 2.0 * frac( p * C.www ) - 1.0;
    float3 h = abs( x ) - 0.5;
    float3 ox = floor( x + 0.5 );
    float3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * ( a0 * a0 + h * h );
    float3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot( m, g );
}

[numthreads(8,8,8)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    Destination[id.xyz] = float3(0, 0, 0);
}

[numthreads(8,8,8)]
void CreateVectorField (uint3 id : SV_DispatchThreadID)
{
    float3 result = float3(0, 0, 0);
    
    float3 Dim;
    Destination.GetDimensions(Dim.x, Dim.y, Dim.z);
    float3 position = (id / Dim - 0.5) * Size + Center;
    
    uint length, stride;
    Data.GetDimensions(length, stride);
    for(int i = 0; i < length; ++i)
    {
        ForceFieldData target = Data[i];
        
        // Check if it's in the range
        float dist = distance(target.Center, position);
        if(dist == 0 || target.StartRange == target.EndRange || dist < target.StartRange || dist > target.EndRange)
            continue;
        
        // Add constant force
        result += target.Direction;
        
        float3 normal = normalize(target.Center - position);
        
        // Add Gravity
        float normDistance = (dist - target.StartRange) / (target.EndRange - target.StartRange) * 8;
        float targetFocus = target.Strength[int(normDistance / 3)][int(normDistance % 3)];
        
        result += normal * targetFocus * (target.GravityFocus - 0.5) * 2;
        
        // Add Rotation        
        // Propel(tangent) direction
        float3 tangent;
        if(dot(float3(0, 1, 0), -normal) == 1)
            tangent = float3(1, 0, 0);
        else
            tangent = mul(-normal, float3(0, 1, 0));
        
        // Blend Vortex attrection and Randomness
        float3 rotationPower = lerp(tangent, -normal, target.Attraction);
        rotationPower = float3(lerp(tangent.x, snoise(position.xy), target.RotationRandomness.x),
                               lerp(tangent.y, snoise(position.yz), target.RotationRandomness.y),
                               tangent.z);
        rotationPower *= target.Speed;
        
        result += rotationPower;
    }
    
    Destination[id.xyz] = result;
}
